# Generated by Django 2.2.13 on 2022-10-10 07:44

from django.conf import settings
from django.db import migrations, models


def add_job_template(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    JobTemplate = apps.get_model('dashboard', 'JobTemplate')

    job_templates = [
        JobTemplate(job_template_type="pulltransmerge", job_template_name="Pull Translations and Request Merge",
                    job_template_desc="Download translations from CI platform and creates merge request.",
                    job_template_params="{package_name,repo_type,repo_branch,pipeline_uuid,target_langs,workflow_step,"
                                        "copy_dir}",
                    job_template_json_str='{"job":{"ci_pipeline":"%PIPELINE_UUID%","exception":"raise",'
                                          '"execution":"sequential","name":"pull translations and request merge",'
                                          '"package":"%PACKAGE_NAME%","return_type":"json","tasks":[{"clone":'
                                          '[{"name":"git repo"},{"type":"%REPO_TYPE%"},{"branch":"%REPO_BRANCH%"},'
                                          '{"recursive":false},{"fork":true}]},{"download":'
                                          '[{"name":"Pull translated files"},{"target_langs":"%TARGET_LANGS%"},'
                                          '{"workflow_step":"%WORKFLOW_STEP%"},{"prehook":"skip"},{"posthook":"skip"},'
                                          '{"prepend_branch":false}]},{"copy":[{"name":"Downloaded files"},'
                                          '{"dir":"%COPY_DIR%"}]}, {"pullrequest":[{"name":"git repo"},'
                                          '{"type":"%REPO_TYPE%"},{"branch":"%REPO_BRANCH%"}]}],'
                                          '"type":"pulltransmerge"}}'
                    ),
    ]

    JobTemplate.objects.bulk_create(job_templates)


def add_job_template_reverse(apps, schema_editor):

    if not settings.MIGRATE_INITIAL_DATA:
        return

    JobTemplate = apps.get_model('dashboard', 'JobTemplate')

    JobTemplate.objects.filter(job_template_type="pulltransmerge").delete()


class Migration(migrations.Migration):

    dependencies = [
        ('dashboard', '0017_update_field_names'),
    ]

    operations = [
        migrations.RunPython(add_job_template, reverse_code=add_job_template_reverse),
    ]
